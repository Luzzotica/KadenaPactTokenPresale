(load "swag-token-env.repl")



(begin-tx "Fund the test sale")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(env-keys ["gov"])
(env-sigs [
  {
    "key": "gov",
    "caps": [
      (coin.GAS)
      (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.TRANSFER "ROOT" (get-token-bank-for-sale "test-sale") 5000.0)
    ]
  }
])
(n_532057688806c2750b8907675929ffb2488e93c0.swag-token.transfer "ROOT" (get-token-bank-for-sale "test-sale") 5000.0)

(commit-tx)



(begin-tx "Test governance")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(env-keys [])
(expect-failure "Can't acquire GOV cap without gov key"
  "Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-gov"
  (test-capability (GOV))
)
(expect-failure "Can't acquire OPS cap without ops key"
  "Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (test-capability (OPS))
)

(env-keys ["test"])
(expect-failure "Can't acquire GOV cap without gov key"
  "Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-gov"
  (test-capability (GOV))
)
(expect-failure "Can't acquire OPS cap without ops key"
  "Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (test-capability (OPS))
)

(env-keys ["gov"])
(expect-that "Can acquire GOV cap with gov key"
  (= "Capability acquired")
  (test-capability (GOV))
)

(env-keys ["ops"])
(expect-that "Can acquire OPS cap with ops key"
  (= "Capability acquired")
  (test-capability (OPS))
)

(commit-tx)



(begin-tx "Check the sale, test getting tiers based on current time")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(let
  (
    (times
      [
        (time "2000-01-01T00:00:00Z")
        (time "2000-01-01T23:59:59Z")
        (time "2000-01-02T00:00:00Z")
        (time "2000-01-02T23:59:59Z")
        (time "2000-01-03T00:00:00Z")
      ]  
    )
    (expected-tier-ids
      [
        "discount"
        "discount"
        "public"
        "public"
        "public-no-min"
      ]
    )
    (check-tier
      (lambda (t:time expected-tier-id:string)
        (env-chain-data {"block-time": t})

        (with-applied-env
          (expect-that "Tier id is correct"
            (= expected-tier-id)
            (at "tier-id" (get-current-tier-for-sale "test-sale"))
          )
        )
      )  
    )
  )  
  (zip (check-tier) times expected-tier-ids)
)

(commit-tx)



(begin-tx "update a sale, test getting tiers")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(expect-that "Update tiers"
  (= "Write succeeded")
  (update-tiers-for-sale
    "test-sale"
    [
      {
        "tier-id": "discount2",
        "tier-type": "WL",
        "start-time": (time "2000-01-01T00:00:00Z"),
        "end-time": (time "2000-01-02T00:00:00Z"),
        "token-per-fungible": 10.0,
        "min-token": 10.0,
        "max-token": 100.0
      },
      {
        "tier-id": "public2",
        "tier-type": "PUBLIC",
        "start-time": (time "2000-01-02T00:00:00Z"),
        "end-time": (time "2000-01-03T00:00:00Z"),
        "token-per-fungible": 100.0,
        "min-token": 10.0,
        "max-token": -1.0
      },
      {
        "tier-id": "public-no-min2",
        "tier-type": "PUBLIC",
        "start-time": (time "2000-01-03T00:00:00Z"),
        "end-time": (time "2000-01-03T00:00:00Z"),
        "token-per-fungible": 100.0,
        "min-token": -1.0,
        "max-token": -1.0
      }
    ]  
  )
)

(let
  (
    (times
      [
        (time "2000-01-01T00:00:00Z")
        (time "2000-01-01T23:59:59Z")
        (time "2000-01-02T00:00:00Z")
        (time "2000-01-02T23:59:59Z")
        (time "2000-01-03T00:00:00Z")
      ]  
    )
    (expected-tier-ids
      [
        "discount2"
        "discount2"
        "public2"
        "public2"
        "public-no-min2"
      ]
    )
    (check-tier
      (lambda (t:time expected-tier-id:string)
        (env-chain-data {"block-time": t})

        (with-applied-env
          (expect-that "Tier id is correct"
            (= expected-tier-id)
            (at "tier-id" (get-current-tier-for-sale "test-sale"))
          )
        )
      )  
    )
  )  
  (zip (check-tier) times expected-tier-ids)
)

(expect-that "Update tiers"
  (= "Write succeeded")
  (update-tiers-for-sale
    "test-sale"
    [
      {
        "tier-id": "discount",
        "tier-type": "WL",
        "start-time": (time "2000-01-01T00:00:00Z"),
        "end-time": (time "2000-01-02T00:00:00Z"),
        "token-per-fungible": 10.0,
        "min-token": 10.0,
        "max-token": 100.0
      },
      {
        "tier-id": "public",
        "tier-type": "PUBLIC",
        "start-time": (time "2000-01-02T00:00:00Z"),
        "end-time": (time "2000-01-03T00:00:00Z"),
        "token-per-fungible": 100.0,
        "min-token": 10.0,
        "max-token": -1.0
      },
      {
        "tier-id": "public-no-min",
        "tier-type": "PUBLIC",
        "start-time": (time "2000-01-03T00:00:00Z"),
        "end-time": (time "2000-01-03T00:00:00Z"),
        "token-per-fungible": 100.0,
        "min-token": -1.0,
        "max-token": -1.0
      }
    ]  
  )
)
(commit-tx)



(begin-tx "Validate tiers tests")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(let
  (
    (tiers
      [
        [{
            "tier-id": "discount",
            "tier-type": "WL2",
            "start-time": (time "2000-01-01T00:00:00Z"),
            "end-time": (time "2000-01-02T00:00:00Z"),
            "token-per-fungible": 10.0,
            "min-token": 10.0,
            "max-token": 100.0
          }],
          [{
            "tier-id": "discount",
            "tier-type": "WL",
            "start-time": (time "2000-01-02T00:00:00Z"),
            "end-time": (time "2000-01-01T00:00:00Z"),
            "token-per-fungible": 10.0,
            "min-token": 10.0,
            "max-token": 100.0
          }],
          [{
            "tier-id": "discount",
            "tier-type": "WL",
            "start-time": (time "2000-01-01T00:00:00Z"),
            "end-time": (time "2000-01-02T00:00:00Z"),
            "token-per-fungible": -1.0,
            "min-token": 10.0,
            "max-token": 100.0
          }],
          [{
            "tier-id": "discount",
            "tier-type": "WL",
            "start-time": (time "2000-01-01T00:00:00Z"),
            "end-time": (time "2000-01-02T00:00:00Z"),
            "token-per-fungible": 1.0,
            "min-token": 100.0,
            "max-token": 10.0
          }],
          [{
            "tier-id": "discount",
            "tier-type": "WL",
            "start-time": (time "2000-01-01T00:00:00Z"),
            "end-time": (time "2000-01-03T00:00:00Z"),
            "token-per-fungible": 1.0,
            "min-token": 10.0,
            "max-token": 100.0
          },
          {
            "tier-id": "discount2",
            "tier-type": "WL",
            "start-time": (time "2000-01-02T00:00:00Z"),
            "end-time": (time "2000-01-04T00:00:00Z"),
            "token-per-fungible": 1.0,
            "min-token": 10.0,
            "max-token": 100.0
          }],
          [{
            "tier-id": "discount",
            "tier-type": "WL",
            "start-time": (time "2000-01-01T00:00:00Z"),
            "end-time": (time "2000-01-04T00:00:00Z"),
            "token-per-fungible": 1.0,
            "min-token": 10.0,
            "max-token": 100.0
          },
          {
            "tier-id": "discount2",
            "tier-type": "WL",
            "start-time": (time "2000-01-02T00:00:00Z"),
            "end-time": (time "2000-01-03T00:00:00Z"),
            "token-per-fungible": 1.0,
            "min-token": 10.0,
            "max-token": 100.0
          }],
          [{
            "tier-id": "discount",
            "tier-type": "WL",
            "start-time": (time "2000-01-01T00:00:00Z"),
            "end-time": (time "2000-01-04T00:00:00Z"),
            "token-per-fungible": 1.0,
            "min-token": 10.0,
            "max-token": 100.0
          },
          {
            "tier-id": "discount2",
            "tier-type": "WL",
            "start-time": (time "2000-01-03T00:00:00Z"),
            "end-time": (time "2000-01-03T00:00:00Z"),
            "token-per-fungible": 1.0,
            "min-token": 10.0,
            "max-token": 100.0
          }]
      ]  
    )
    (expected-failures
      [
        "Invalid tier type"
        "Start must be before end"
        "Token per fungible must be greater than or equal to 0"
        "Min token must be less than or equal to max token"
        "Tiers overlap"
        "Tiers overlap"
        "Tiers overlap"
      ]
    )
    (check-tier 
      (lambda (tiers expected-failure)
        (expect-failure "Validate tier works"
          expected-failure
          (validate-tiers tiers)
        )
      )  
    )
  )  
  (zip (check-tier) tiers expected-failures)
)


(commit-tx)



(begin-tx "Sale Getters")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(expect-that "Can get sale"
  (= "test-sale")
  (at "name" (get-sale "test-sale"))
)
(env-chain-data {"block-time": (time "2000-01-01T00:00:00Z")})
(expect-that "Sale price is correct"
  (= 10.0)
  (get-current-sale-price "test-sale")
)
(expect-that "Available supply"
  (= 5000.0)
  (get-available-supply-for-sale "test-sale")
)
(expect-that "Total supply"
  (= 5000.0)
  (get-total-supply-for-sale "test-sale")
)
(expect-that "Totla sold"
  (= 0.0)
  (get-total-sold-for-sale "test-sale")
)
(expect-that "Can get bank"
  (= "k:gov")
  (get-fungible-bank-for-sale "test-sale")
)

(commit-tx)



(begin-tx "Whitelist: check add, is-whitelisted, get purchase amount")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(let
  (
    (expected-whitelist-info
      [
        {"tier-id": "discount", "account": "bob", "whitelisted": true, "purchase-amount": 0.0},
        {"tier-id": "discount", "account": "dave", "whitelisted": true, "purchase-amount": 0.0},
        {"tier-id": "public", "account": "bob", "whitelisted": false, "purchase-amount": -1.0},
        {"tier-id": "public", "account": "dave", "whitelisted": false, "purchase-amount": -1.0},
        {"tier-id": "public", "account": "alice", "whitelisted": false, "purchase-amount": -1.0},
        {"tier-id": "public", "account": "carol", "whitelisted": false, "purchase-amount": -1.0}
      ]  
    )
    (check-whitelist-info
      (lambda (whitelist-info:object)
        (bind whitelist-info
          { "tier-id":= tier-id 
          , "account":= account
          , "whitelisted":= whitelisted
          , "purchase-amount":= purchase-amount
          }
          (expect-that "Whitelist is correct"
            (= whitelisted)
            (is-whitelisted "test-sale" tier-id account)
          )
          (expect-that "Purchase amount is correct"
            (= purchase-amount)
            (get-whitelisted-purchase-amount "test-sale" tier-id account)
          )
        )
      )  
    )
  )
  (map (check-whitelist-info) expected-whitelist-info)
)

(commit-tx)



(begin-tx "Whitelist data validation works")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(let
  (
    (tier-datas
      [
        [
          {"tier-id": "discount2", "accounts": ["bob" "dave"]}
        ],
        [
          {"tier-id": "public", "accounts": ["bob" "dave"]}
        ]
      ]
    )
    (failures
      [
        "Couldn't find tier with id: discount2",
        "Can't add whitelisted accounts to a non-whitelist tier."
      ]
    )
    (check-validation
      (lambda (whitelist-info failure:string)
        (expect-failure "Whitelist data validation works"
          failure
          (add-whitelist-to-sale "test-sale" whitelist-info)
        )
      )
    )
  )
  (zip (check-validation) tier-datas failures)
)

(expect-failure "Fails if sale doesn't exist"
  "Failure: Tx Failed: with-read: row not found: xyz"
  (add-whitelist-to-sale "xyz" [])
)

(commit-tx)



(begin-tx "Test whitelist update ops")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(env-keys ["bob-key"])
(expect-failure "Can't call update without ops"
  "Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (update-whitelist-purchase-amount-ops "test-sale" "discount" "bob" 0.0)
)

(env-keys ["ops"])
(expect-that  "Can update purchase amount, and it has the desired effect"
  (= ["Write succeeded" true 1.0 "Write succeeded" false -1.0 "Write succeeded" true 0.0])
  [
    (update-whitelist-purchase-amount-ops "test-sale" "discount" "bob" 1.0)
    (is-whitelisted "test-sale" "discount" "bob")
    (get-whitelisted-purchase-amount "test-sale" "discount" "bob")
    (update-whitelist-purchase-amount-ops "test-sale" "discount" "bob" -1.0)
    (is-whitelisted "test-sale" "discount" "bob")
    (get-whitelisted-purchase-amount "test-sale" "discount" "bob")
    (update-whitelist-purchase-amount-ops "test-sale" "discount" "bob" 0.0)
    (is-whitelisted "test-sale" "discount" "bob")
    (get-whitelisted-purchase-amount "test-sale" "discount" "bob")
  ]
)

(commit-tx)



(begin-tx "Reserve, reserve event, min/max, and can't do 0")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)
(env-chain-data {"block-time": (time "2000-01-01T00:00:00Z")})

(expect-failure "Can't purchase below the minimum"
  "Amount must be greater than 0."
  (reserve "test-sale" "bob" 0.0)
)
(expect-failure "Can't purchase below the minimum"
  "Purchase amount is less than minimum"
  (reserve "test-sale" "bob" 0.5)
)
(expect-failure "Can't purchase above the max"
  "Purchase limit reached"
  (reserve "test-sale" "bob" 100.0)
)

(env-events true)

(env-keys ["bob-key"])
(env-sigs [
  {
    "key": "bob-key",
    "caps": [
      (coin.GAS)
      (coin.TRANSFER "bob" (get-fungible-bank-for-sale "test-sale") 2.5)
    ]
  }
])
(expect-that "Reserving succeeds"
  (= true)
  (reserve "test-sale" "bob" 2.0)
)
(expect-that "Reserve event is emitted"
  (= ["test-sale" "bob" 20.0])
  (at "params" (at 1 (env-events true)))
)
(expect-that "total sold updated"
  (= 20.0)
  (get-total-sold-for-sale "test-sale")
)
(expect-that "Reserving less than the min succeeds if already reserved"
  (= true)
  (reserve "test-sale" "bob" 0.5)
)
(expect-that "total sold updated"
  (= 25.0)
  (get-total-sold-for-sale "test-sale")
)

(expect-failure "Can't reserve if not whitelisted"
  "Account is not whitelisted"
  (reserve "test-sale" "alice" 1.0)
)
(expect-that "total sold not updated"
  (= 25.0)
  (get-total-sold-for-sale "test-sale")
)

(expect-that "Available supply works"
  (= 4975.0)
  (get-available-supply-for-sale "test-sale")
)
(expect-that "Can get reservation for account"
  (= [25.0 false])
  [
    (at "amount-token" (get-reservation-for-account "test-sale" "bob"))
    (at "is-paid" (get-reservation-for-account "test-sale" "bob"))
  ]
)

(commit-tx)



(begin-tx "Payouts")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(env-keys ["ops"])
(expect-that "Has unpaid reservations"
  (= 1)
  (length (get-unpaid-reservations-for-sale "test-sale"))
)
(expect-that "Can payout reservations"
  (= ["Write succeeded"])
  (payout-reservations "test-sale" ["bob"])
)

(expect-that "Reservation was marked as paid"
  (= [25.0 25.0 true])
  [
    (at "amount-token" (get-reservation-for-account "test-sale" "bob"))
    (at "amount-token-paid" (get-reservation-for-account "test-sale" "bob"))
    (at "is-paid" (get-reservation-for-account "test-sale" "bob"))
  ]
)
(expect-that "Has unpaid reservations"
  (= 0)
  (length (get-unpaid-reservations-for-sale "test-sale"))
)

(expect-that "Has tokens"
  (= [4975.0 25.0])
  [
    (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.get-balance (get-token-bank-for-sale "test-sale"))
    (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.get-balance "bob")
  ]
)


(commit-tx)



(begin-tx "Reserve, public")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)
(env-chain-data {"block-time": (time "2000-01-02T00:00:00Z")})

(env-keys ["alice-key" "bob-key"])
(env-sigs
  [
    {
      "key": "alice-key",
      "caps": [
        (coin.GAS)
        (coin.TRANSFER "alice" (get-fungible-bank-for-sale "test-sale") 30.0)
      ]
    },
    {
      "key": "bob-key",
      "caps": [
        (coin.GAS)
        (coin.TRANSFER "bob" (get-fungible-bank-for-sale "test-sale") 20.0)
      ]
    }
  ]  
)
(expect-that "Reserving succeeds even if below min for bob"
  (= true)
  (reserve "test-sale" "bob" 0.01)
)
(expect-that "Reserve event is emitted"
  (= ["test-sale" "bob" 1.0])
  (at "params" (at 1 (env-events true)))
)

(expect-failure "can't purchase below minimum"
  "Purchase amount is less than minimum"
  (reserve "test-sale" "alice" 0.01)
)
(expect-failure "can't purchase more than total supply minimum"
  "Purchase amount exceeds total supply"  
  (reserve "test-sale" "alice" 1000.0)
)
(expect-failure "Can't purchase more than total supply includes total sold"
  "Purchase amount exceeds total supply"  
  (reserve "test-sale" "alice" 49.9)
)
(expect-that "Reserving succeeds"
  (= true)
  (reserve "test-sale" "alice" 10.0)
)
(expect-that "Bank now has money"
  (= 12.51)
  (coin.get-balance (get-fungible-bank-for-sale "test-sale"))
)
(expect-that "Bob and alice spent money"
  (= [997.49 990.0])
  [
    (coin.get-balance "bob")
    (coin.get-balance "alice")
  ]
)

(expect-that "total sold updated"
  (= 1026.0)
  (get-total-sold-for-sale "test-sale")
)
(expect-that "Available supply works"
  (= 3974.0)
  (get-available-supply-for-sale "test-sale")
)

(expect-that "Can get reservation for account"
  (= [26.0 false])
  [
    (at "amount-token" (get-reservation-for-account "test-sale" "bob"))
    (at "is-paid" (get-reservation-for-account "test-sale" "bob"))
  ]
)

(commit-tx)



(begin-tx "Enforce sale status")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)
(env-keys ["ops"])

(update-status-for-sale "test-sale" "CANCELLED")
(expect-failure "can't purchase from canceled sale"
  "Sale is not active."
  (reserve "test-sale" "alice" 0.01)
)
(update-status-for-sale "test-sale" "ACTIVE")

(commit-tx)



(begin-tx "Payouts")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(env-keys ["ops"])

(expect-that "Payout accounts are correct"
  (= ["alice" "bob"])
  (get-payout-accounts-for-sale "test-sale")
)
(expect-that "Reservation is unpaid for bob now"
  (= [26.0 25.0 false])
  [
    (at "amount-token" (get-reservation-for-account "test-sale" "bob"))
    (at "amount-token-paid" (get-reservation-for-account "test-sale" "bob"))
    (at "is-paid" (get-reservation-for-account "test-sale" "bob"))
  ]
)
(expect-that "Has unpaid reservations"
  (= 2)
  (length (get-unpaid-reservations-for-sale "test-sale"))
)
(expect-that "Can payout reservations"
  (= ["Write succeeded" "Write succeeded"])
  (payout-reservations "test-sale" ["alice" "bob"])
)
(expect-that "Reservation is unpaid for bob now"
  (= [26.0 26.0 true])
  [
    (at "amount-token" (get-reservation-for-account "test-sale" "bob"))
    (at "amount-token-paid" (get-reservation-for-account "test-sale" "bob"))
    (at "is-paid" (get-reservation-for-account "test-sale" "bob"))
  ]
)
(expect-that "Has unpaid reservations"
  (= 0)
  (length (get-unpaid-reservations-for-sale "test-sale"))
)
(expect-that "Payout accounts are correct"
  (= [])
  (get-payout-accounts-for-sale "test-sale")
)

(expect-that "Has tokens"
  (= [3974.0 26.0 1000.0])
  [
    (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.get-balance (get-token-bank-for-sale "test-sale"))
    (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.get-balance "bob")
    (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.get-balance "alice")
  ]
)

(commit-tx)



(begin-tx "Withdraw")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(env-keys ["ops"])
(expect-that "Can withdraw"
  (= "Write succeeded")
  (withdraw-from-token-bank "test-sale" "ROOT" 1000.0)
)
(expect-that "Transferred tokens"
  (= [2974.0 4000.0])
  [
    (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.get-balance (get-token-bank-for-sale "test-sale"))
    (n_532057688806c2750b8907675929ffb2488e93c0.swag-token.get-balance "ROOT")
  ]
)

(commit-tx)



(begin-tx "Ops guarded and private functions")
(use n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale)

(env-keys ["bob"])
(env-data {
  "sale-data": {
    "name": "bob",
    "token-name": "swag-token",
    "total-supply": 5000.0,
    "tiers": []
  },
  "ks": { "keys": ["gov"], "pred": "keys-all" }
})
(expect-failure "Require withdraw"
  "Failure: Tx Failed: require-capability: not granted: (n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale.WITHDRAW)"
  (require-WITHDRAW "test-sale")
)
(expect-failure "Create sale"
  "Failure: Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (create-sale (read-msg "sale-data") (read-keyset "ks") coin n_532057688806c2750b8907675929ffb2488e93c0.swag-token)
)
(expect-failure "update state"
  "Failure: Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (update-status-for-sale "" "")
)
(expect-failure "update tiers"
  "Failure: Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (update-tiers-for-sale "" [])
)
(expect-failure "add whitelist"
  "Failure: Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (add-whitelist-to-sale "" [])
)
(expect-failure "add to whitelist private"
  "Failure: Tx Failed: require-capability: not granted: (n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale.OPS)"
  (add-to-whitelist "test-sale" "" "")
)
(expect-failure "update whitelist purchase"
  "Failure: Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (update-whitelist-purchase-amount-ops "" "" "" 1.0)
)
(expect-failure "update whitelist purchase private"
  "Failure: Tx Failed: require-capability: not granted: (n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale.WHITELIST_UPDATE)"
  (update-whitelist-purchase-amount "" "" "" 1.0)
)
(expect-failure "Reserve internal (Private)"
  "Failure: Tx Failed: require-capability: not granted: (n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale.RESERVE)"
  (reserve-internal "" "" (read-keyset "ks") 0.0 0.0 1.0)
)
(expect-failure "Payout reservations"
  "Failure: Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (payout-reservations "" [])
)
(expect-failure "payout reservations private"
  "Failure: Tx Failed: require-capability: not granted: (n_532057688806c2750b8907675929ffb2488e93c0.swag-token-sale.WITHDRAW)"
  (payout-reservation-internal "" n_532057688806c2750b8907675929ffb2488e93c0.swag-token "" "")
)
(expect-failure "withdraw from bank"
  "Failure: Tx Failed: Keyset failure (keys-all): 'n_532057688806c2750b8907675929ffb2488e93c0.swag-token-ops"
  (withdraw-from-token-bank "" "" 1.0)
)

(commit-tx)